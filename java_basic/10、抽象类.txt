在java中没有方法体的方法应该定义为一个抽象方法，而类中有抽象方法，那么该类就必须定义为抽象类。
特点：
	A、抽象类和抽象方法必须用abstract关键字修饰
	B、抽象类中不一定有抽象方法，但有抽象方法的类必须定义为抽象类
	C、抽象类不能够实例化
		因为他不是具体的
		抽象类有构造方法，但不能够实例化
		用于子类访问父类数据的初始化
	D、抽象的子类
		a、抽象类的子类是一个抽象类
		b、重写父类的所有方法，这个时候子类是一个具体类。
抽象类通过具体的子类实例化，是多态的方式
abstract class Animal{
	private String name;
	public abstract void eat(); 
	public Animal(){} //抽象类有构造方法，但不能够实例化	
	public void setName(String name){} //可以有非抽象方法
}
abstract class Dog extends Animal{}
class Cat extends Animal{
	public void  eat();
} 
抽象类的成员特点：
	成员变量：既可以是变量也可以是常量
	构造方法：有。
		用于子类访问父类数据的初始化
	成员方法：可以是抽象的，也可以是非抽象的
	抽象类的方法特性：
	  A:抽象方法 强制要求子类去做的事
	  B:非抽象方法，让子类继承的事情，提高代码的复用性
	如果不是为了程序的拓展性，可以不适用多态的方式

	一个类没有抽象方法，可不可以定义为抽象类？有什么意义？ A、可以 B、不让外界创建对象
	 抽象不能和那些关键字共存
	private 冲突    私有不能被继承
	final 冲突	不能被重写
	static 无意义	抽象没有方法体，static通过类名访问
	