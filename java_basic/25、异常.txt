文件用于永久存储数据
应用场景：
IO读取客户端数据写到服务器
下载
异常：Throwable
	严重问题：error，比如内存溢出
	问题：
	编译期异常：非RuntimeException类型的异常，必须进行处理。不处理则编译不通过。
	运行时异常：RuntimeException，也不处理，代码不够严谨造成
程序出现问题,如果我们没有处理,jvm会做出默认的处理.同时会结束程序
	A:try... catch...finally
	格式：
	try{
	可能出现问题的代码
	}catch(){
	针对问题1的处理
	}catch(){
	针对问题2的处理
	}finally{
	释放资源
	}
	注意：try里面的代码越少越好
	1、能明确的精良明确，不要用大的来处理
	2、平级关系的异常谁前谁后无所谓，父级的在后面
	Exception处理所有的异常
	B:throws 抛出
编译期异常和运行期异常的区别：
编译期：
运行期：无需显示处理，也可以和编译期异常一样处理

Throwable异常中要了解的方法：
	1、public String getMessage();//异常的消息字符
	2、public String toString()；//返回异常的简单描述
    返回 类名：getMessage();
	3、public void printStackTrace()；//打印出错的行号     后面的逻辑会执行，前面的两个不会执行后面的逻辑
	4、prinStackTrace(PrintStream s)

/――――――――――――――――――――――――――――/
使用throws处理
	定义功能方法时，需要把出现的问题暴露出来，让调用者去处理。那么就通过throws在方法上标志
	//在方法上抛出，是为了告诉调用者，让他处理
小结：
编译期异常抛出，将来调用者必须处理。
运行期异常抛出，将来调用可以不用处理。


throw()和throws（）区别
在功能方法内部出现某种情况，程序不能够继续运行，需要进行跳转，就用throw把异常对象抛出

throws
	用在方法声明后面，跟的是异常类名
	可以跟多个异常类名，用逗号隔开
	表示抛出异常，由该方法的调用者来处理
	throws表示出现异常的一种可能性，并不一定会发生这些异常
throw
	用在方法体内，跟的是异常对象名
	只能抛出一个异常对象名
	表示抛出异常，由方法体内的语句处理
	执行throw一定是抛出了某种异常


finally
	被finally控制的语句体一定会执行
	注意：如果在执行到finally之前jvm 退出了，就不能执行
	作用：用于释放资源，用于IO流和数据库操作


finally 异常处理的一部分，用于释放资源。一般来说，代码肯定会执行
final 最终，修饰类成员变量，成员方法
finalize  垃圾回收器确定不存在该对象的更多引用时，由垃圾回收器调用 Object类的一个方法

如果catch里面有return语句，那么finally的代码会执行吗
	会，在return之前执行
int a=10;
try{
	System.out.println(a);
	a=20;
}catch(ArithmeticException){
a=30;
	return a;
/*
return a 在程序执行到该步骤，return a 已经是30

*/
}finally{
	a=40
}


try ... catch ...finally
try ... catch...
try ... catch ....catch
try ... finally 这种做法的目的是为了释放资源
不能单独使用catch和finally

自定义异常：
继承Exception
继承RuntimeException
class MyException extends Exception{
	public MyException(){}
	public MyException(String msg){
//把异常信息打印
	super(msg);
}
}
public class Teacher throws MyException{
	public void check(int score){
	if(score>100||score<0)
{
	throw new MyException();

}else{
	System.out.println("没有问题");
 }
 }
}


异常的注意事项：
A:子类重写父类方法时 ，子类的方法必须抛出相同的异常或父类异常的子类
B: